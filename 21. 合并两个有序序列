/*
21. 合并两个有序序列
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
提示：
两个链表的节点数目范围是 [0, 50]
-100 <= Node.val <= 100
l1 和 l2 均按 非递减顺序 排列
*/

/*
我的题解：t O(m + n) s O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null) return list2;
        if(list2 == null) return list1;
        ListNode compareL;
        ListNode getNodeL;
        ListNode result;
        if(list1.val <= list2.val ){
            compareL = list1;
            getNodeL = list2;
        }else{
            compareL = list2;
            getNodeL = list1;
        }
        result = compareL;
        ListNode compareLN = compareL.next;
        while(compareLN != null && getNodeL != null){
            if(compareLN.val >= getNodeL.val){
                compareL.next = getNodeL;
                ListNode temp = getNodeL.next;
                getNodeL.next = compareLN;
                compareL = getNodeL;
                getNodeL = temp;
            }else{
                compareL = compareLN;
                compareLN = compareLN.next;
            }
        }

        if(compareLN == null){
            compareL.next = getNodeL;
        }

        return result;

    }
}

官方题解：
递归  t O(m + n) s O(m + n)
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        } else if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}

迭代  t O(m + n) s O(1)
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode prehead = new ListNode(-1);

        ListNode prev = prehead;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                prev.next = l1;
                l1 = l1.next;
            } else {
                prev.next = l2;
                l2 = l2.next;
            }
            prev = prev.next;
        }

        // 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可
        prev.next = l1 == null ? l2 : l1;

        return prehead.next;
    }
}

*/
